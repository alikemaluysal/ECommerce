// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20240305152210_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalAmount");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BasketId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01627ffa-445c-4111-b0f8-935c96814454"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(819),
                            Description = "Fresh Meat",
                            Name = "Fresh Meat"
                        },
                        new
                        {
                            Id = new Guid("2fedbbd7-46a5-487d-bc3a-51243f1280b3"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(822),
                            Description = "Vegetables",
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = new Guid("77bf0937-7055-47a6-950a-77b2328da3c6"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(823),
                            Description = "Fresh Fruits",
                            Name = "Fresh Fruits"
                        },
                        new
                        {
                            Id = new Guid("2411b221-ec3d-4170-9978-d958440bd35f"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(825),
                            Description = "Dried Fruits & Nuts",
                            Name = "Dried Fruits & Nuts"
                        },
                        new
                        {
                            Id = new Guid("8e978bdb-2528-48f2-bf61-d7e5c342d5a8"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(826),
                            Description = "Ocean Foods",
                            Name = "Ocean Foods"
                        },
                        new
                        {
                            Id = new Guid("3bbd6712-dba4-40aa-904a-a12898fcdb65"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(828),
                            Description = "Butter & Eggs",
                            Name = "Butter & Eggs"
                        },
                        new
                        {
                            Id = new Guid("e9b8588e-25dd-45a2-926a-ce313035bdbc"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(829),
                            Description = "Fastfood",
                            Name = "Fastfood"
                        },
                        new
                        {
                            Id = new Guid("3acbce70-bf9e-4ed8-bf9f-bb1311a82899"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(830),
                            Description = "Oatmeal",
                            Name = "Oatmeal"
                        },
                        new
                        {
                            Id = new Guid("52021e7d-7e0f-4e09-ae74-8e1891752f1a"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(831),
                            Description = "Juices",
                            Name = "Juices"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CommentDate");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CommentText");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("ActivationKey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActivationKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("IsVerified");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LikedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("LikedProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Write"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.RevokeToken"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Admin"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Write"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Create"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Update"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Delete"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Admin"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Read"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Write"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Create"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Update"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Delete"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Admin"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Read"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Write"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Create"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Update"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Delete"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baskets.Admin"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baskets.Read"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baskets.Write"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baskets.Create"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baskets.Update"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baskets.Delete"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasketItems.Admin"
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasketItems.Read"
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasketItems.Write"
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasketItems.Create"
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasketItems.Update"
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BasketItems.Delete"
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Admin"
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Read"
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Write"
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Create"
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Update"
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Delete"
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comments.Admin"
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comments.Read"
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comments.Write"
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comments.Create"
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comments.Update"
                        },
                        new
                        {
                            Id = 47,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comments.Delete"
                        },
                        new
                        {
                            Id = 48,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LikedProducts.Admin"
                        },
                        new
                        {
                            Id = 49,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LikedProducts.Read"
                        },
                        new
                        {
                            Id = 50,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LikedProducts.Write"
                        },
                        new
                        {
                            Id = 51,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LikedProducts.Create"
                        },
                        new
                        {
                            Id = 52,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LikedProducts.Update"
                        },
                        new
                        {
                            Id = 53,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LikedProducts.Delete"
                        },
                        new
                        {
                            Id = 54,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orders.Admin"
                        },
                        new
                        {
                            Id = 55,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orders.Read"
                        },
                        new
                        {
                            Id = 56,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orders.Write"
                        },
                        new
                        {
                            Id = 57,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orders.Create"
                        },
                        new
                        {
                            Id = 58,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orders.Update"
                        },
                        new
                        {
                            Id = 59,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orders.Delete"
                        },
                        new
                        {
                            Id = 60,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrderItems.Admin"
                        },
                        new
                        {
                            Id = 61,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrderItems.Read"
                        },
                        new
                        {
                            Id = 62,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrderItems.Write"
                        },
                        new
                        {
                            Id = 63,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrderItems.Create"
                        },
                        new
                        {
                            Id = 64,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrderItems.Update"
                        },
                        new
                        {
                            Id = 65,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrderItems.Delete"
                        },
                        new
                        {
                            Id = 66,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Products.Admin"
                        },
                        new
                        {
                            Id = 67,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Products.Read"
                        },
                        new
                        {
                            Id = 68,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Products.Write"
                        },
                        new
                        {
                            Id = 69,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Products.Create"
                        },
                        new
                        {
                            Id = 70,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Products.Update"
                        },
                        new
                        {
                            Id = 71,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Products.Delete"
                        },
                        new
                        {
                            Id = 72,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProductImages.Admin"
                        },
                        new
                        {
                            Id = 73,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProductImages.Read"
                        },
                        new
                        {
                            Id = 74,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProductImages.Write"
                        },
                        new
                        {
                            Id = 75,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProductImages.Create"
                        },
                        new
                        {
                            Id = 76,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProductImages.Update"
                        },
                        new
                        {
                            Id = 77,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProductImages.Delete"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalAmount");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("IsVerified");

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SecretKey");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int")
                        .HasColumnName("QuantityAvailable");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6db7024e-aa6e-4cb9-89eb-cc877e0f7042"),
                            CategoryId = new Guid("52021e7d-7e0f-4e09-ae74-8e1891752f1a"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(888),
                            Description = "Mixed Fruit Juice",
                            Name = "Mixed Fruit Juice",
                            Price = 410m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = new Guid("8a15110d-2f57-4d49-b983-8adff3e3574a"),
                            CategoryId = new Guid("2411b221-ec3d-4170-9978-d958440bd35f"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(891),
                            Description = "Mango",
                            Name = "Mango",
                            Price = 112m,
                            QuantityAvailable = 50
                        },
                        new
                        {
                            Id = new Guid("1fd43c98-1bfb-4a83-914c-9bad663eb0ef"),
                            CategoryId = new Guid("3acbce70-bf9e-4ed8-bf9f-bb1311a82899"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(894),
                            Description = "Hamburger",
                            Name = "Hamburger",
                            Price = 494m,
                            QuantityAvailable = 20
                        },
                        new
                        {
                            Id = new Guid("f1f1639a-d3e0-4ec9-9d47-cde00d43e44f"),
                            CategoryId = new Guid("2fedbbd7-46a5-487d-bc3a-51243f1280b3"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(896),
                            Description = "Meat",
                            Name = "Red Meat",
                            Price = 96m,
                            QuantityAvailable = 50
                        },
                        new
                        {
                            Id = new Guid("140aa7e9-01df-4036-96e3-01d0784cd709"),
                            CategoryId = new Guid("2411b221-ec3d-4170-9978-d958440bd35f"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(897),
                            Description = "Banana",
                            Name = "Banana",
                            Price = 137m,
                            QuantityAvailable = 75
                        },
                        new
                        {
                            Id = new Guid("c375b4cd-f41a-4f64-87a0-791c20d6de37"),
                            CategoryId = new Guid("2411b221-ec3d-4170-9978-d958440bd35f"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(900),
                            Description = "Fig",
                            Name = "Fig",
                            Price = 464m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = new Guid("73e248a6-0f66-4640-91a1-61881e1f9a50"),
                            CategoryId = new Guid("2411b221-ec3d-4170-9978-d958440bd35f"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(902),
                            Description = "Apple",
                            Name = "Apple",
                            Price = 161m,
                            QuantityAvailable = 80
                        },
                        new
                        {
                            Id = new Guid("192a67be-09e7-4056-b18d-23ea78d54191"),
                            CategoryId = new Guid("2411b221-ec3d-4170-9978-d958440bd35f"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(904),
                            Description = "Grapes",
                            Name = "Grapes",
                            Price = 269m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = new Guid("e539d788-9cfd-419d-a6c0-7c9ecced74f8"),
                            CategoryId = new Guid("2411b221-ec3d-4170-9978-d958440bd35f"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(906),
                            Description = "Watermelon",
                            Name = "Watermelon",
                            Price = 396m,
                            QuantityAvailable = 20
                        },
                        new
                        {
                            Id = new Guid("00c11dca-8f36-4c70-85fd-0dbdd09d7f8d"),
                            CategoryId = new Guid("8e978bdb-2528-48f2-bf61-d7e5c342d5a8"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(908),
                            Description = "Raisins",
                            Name = "Raisins",
                            Price = 366m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = new Guid("a10c4411-9591-44a2-bb0c-27d700a116ed"),
                            CategoryId = new Guid("52021e7d-7e0f-4e09-ae74-8e1891752f1a"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(910),
                            Description = "Orange Juice",
                            Name = "Orange Juice",
                            Price = 456m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = new Guid("d5236461-b469-4725-a54c-4ce547a3b90f"),
                            CategoryId = new Guid("2411b221-ec3d-4170-9978-d958440bd35f"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(912),
                            Description = "Mixed Fruits",
                            Name = "Mixed Fruits",
                            Price = 229m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = new Guid("0e54932e-e776-4a7a-b1b9-d051238627f0"),
                            CategoryId = new Guid("77bf0937-7055-47a6-950a-77b2328da3c6"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(913),
                            Description = "Spinach",
                            Name = "Spinach",
                            Price = 180m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = new Guid("530f39c4-569e-400b-8565-2f4a339682e1"),
                            CategoryId = new Guid("77bf0937-7055-47a6-950a-77b2328da3c6"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(915),
                            Description = "Bell Pepper",
                            Name = "Bell Pepper",
                            Price = 136m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = new Guid("c5af10c3-c4ec-47e7-a6d4-4da0a8cd4df2"),
                            CategoryId = new Guid("3acbce70-bf9e-4ed8-bf9f-bb1311a82899"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(917),
                            Description = "Fried Chicken",
                            Name = "Fried Chicken",
                            Price = 228m,
                            QuantityAvailable = 20
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageUrl");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a94cf8f-8a62-4666-8312-b0dcac7b6b46"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(942),
                            ImageUrl = "/theme/img/product/discount/pd-3.jpg",
                            ProductId = new Guid("6db7024e-aa6e-4cb9-89eb-cc877e0f7042")
                        },
                        new
                        {
                            Id = new Guid("be6535b2-d9c3-47de-9eea-a5a38bf14947"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(946),
                            ImageUrl = "/theme/img/product/discount/pd-4.jpg",
                            ProductId = new Guid("8a15110d-2f57-4d49-b983-8adff3e3574a")
                        },
                        new
                        {
                            Id = new Guid("32bf6d1b-423a-496b-855b-73d66580dd70"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(947),
                            ImageUrl = "/theme/img/product/discount/pd-5.jpg",
                            ProductId = new Guid("1fd43c98-1bfb-4a83-914c-9bad663eb0ef")
                        },
                        new
                        {
                            Id = new Guid("9ef744b6-139e-491f-86cb-bfd05ac8076e"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(949),
                            ImageUrl = "/theme/img/product/product-1.jpg",
                            ProductId = new Guid("f1f1639a-d3e0-4ec9-9d47-cde00d43e44f")
                        },
                        new
                        {
                            Id = new Guid("ea29efed-80ff-4319-9fea-2e01f3b914c2"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(951),
                            ImageUrl = "/theme/img/product/product-2.jpg",
                            ProductId = new Guid("140aa7e9-01df-4036-96e3-01d0784cd709")
                        },
                        new
                        {
                            Id = new Guid("f35949b7-d780-4f25-9b27-320469241496"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(953),
                            ImageUrl = "/theme/img/product/product-3.jpg",
                            ProductId = new Guid("c375b4cd-f41a-4f64-87a0-791c20d6de37")
                        },
                        new
                        {
                            Id = new Guid("902a956f-1114-43ed-a4fd-631679babcc8"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(955),
                            ImageUrl = "/theme/img/product/product-8.jpg",
                            ProductId = new Guid("73e248a6-0f66-4640-91a1-61881e1f9a50")
                        },
                        new
                        {
                            Id = new Guid("713da0e4-2249-4a78-9b3c-a206f171389e"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(956),
                            ImageUrl = "/theme/img/product/product-4.jpg",
                            ProductId = new Guid("192a67be-09e7-4056-b18d-23ea78d54191")
                        },
                        new
                        {
                            Id = new Guid("e482e356-7be9-4c43-972e-606b95102ff8"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(957),
                            ImageUrl = "/theme/img/product/product-7.jpg",
                            ProductId = new Guid("e539d788-9cfd-419d-a6c0-7c9ecced74f8")
                        },
                        new
                        {
                            Id = new Guid("fd9d6516-de9f-4144-8abb-42e3172597b1"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(961),
                            ImageUrl = "/theme/img/product/product-9.jpg",
                            ProductId = new Guid("00c11dca-8f36-4c70-85fd-0dbdd09d7f8d")
                        },
                        new
                        {
                            Id = new Guid("7b030ee2-e806-4dc5-84e5-437e2670acb0"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(962),
                            ImageUrl = "/theme/img/product/product-11.jpg",
                            ProductId = new Guid("a10c4411-9591-44a2-bb0c-27d700a116ed")
                        },
                        new
                        {
                            Id = new Guid("ec47585b-667a-45f2-b652-6c37bcd6f77a"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(964),
                            ImageUrl = "/theme/img/product/product-12.jpg",
                            ProductId = new Guid("d5236461-b469-4725-a54c-4ce547a3b90f")
                        },
                        new
                        {
                            Id = new Guid("0950f706-9920-4f40-a435-3908e0b2ba89"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(965),
                            ImageUrl = "/theme/img/latest-product/lp-1.jpg",
                            ProductId = new Guid("0e54932e-e776-4a7a-b1b9-d051238627f0")
                        },
                        new
                        {
                            Id = new Guid("29f9a3c7-df9c-4616-b89e-335ca0e9f568"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(966),
                            ImageUrl = "/theme/img/product/details/product-details-2.jpg",
                            ProductId = new Guid("530f39c4-569e-400b-8565-2f4a339682e1")
                        },
                        new
                        {
                            Id = new Guid("df7442c9-d07b-4625-a9c0-f844d15bb28c"),
                            CreatedDate = new DateTime(2024, 3, 5, 15, 22, 9, 836, DateTimeKind.Utc).AddTicks(968),
                            ImageUrl = "/theme/img/product/product-10.jpg",
                            ProductId = new Guid("c5af10c3-c4ec-47e7-a6d4-4da0a8cd4df2")
                        });
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiresDate");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReplacedByToken");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RevokedByIp");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RevokedDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("int")
                        .HasColumnName("AuthenticatorType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e31726f-1fd1-429d-b486-e618086bebe6"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@alikemaluysal.com",
                            PasswordHash = new byte[] { 140, 36, 124, 107, 147, 26, 126, 77, 253, 159, 173, 142, 196, 155, 186, 251, 237, 64, 3, 24, 188, 130, 110, 9, 44, 37, 21, 139, 64, 119, 94, 55, 47, 198, 32, 51, 10, 96, 4, 168, 108, 120, 167, 67, 185, 202, 184, 211, 93, 97, 89, 185, 202, 135, 27, 109, 100, 196, 52, 215, 96, 209, 233, 158 },
                            PasswordSalt = new byte[] { 182, 127, 184, 207, 70, 119, 245, 33, 189, 195, 248, 182, 174, 143, 198, 5, 80, 209, 167, 148, 215, 248, 222, 4, 254, 216, 133, 6, 84, 88, 113, 79, 181, 250, 77, 194, 67, 172, 11, 40, 65, 184, 244, 227, 120, 209, 251, 247, 87, 82, 174, 70, 18, 246, 223, 209, 22, 211, 248, 165, 165, 220, 134, 120, 253, 63, 190, 135, 231, 170, 171, 227, 107, 19, 122, 48, 157, 137, 33, 183, 181, 23, 146, 45, 173, 103, 109, 38, 197, 183, 178, 125, 214, 119, 161, 168, 52, 87, 142, 118, 153, 201, 97, 187, 56, 142, 35, 242, 162, 129, 65, 70, 238, 175, 231, 142, 108, 220, 132, 156, 133, 246, 153, 25, 74, 129, 168, 69 }
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3859ee0a-9acc-4d20-8299-93b6ad6ff0b0"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperationClaimId = 1,
                            UserId = new Guid("0e31726f-1fd1-429d-b486-e618086bebe6")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.BasketItem", b =>
                {
                    b.HasOne("Domain.Entities.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("Baskets")
                        .HasForeignKey("UserId");

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("EmailAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.LikedProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("LikedProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("OtpAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.Navigation("BasketItems");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Comments");

                    b.Navigation("EmailAuthenticators");

                    b.Navigation("LikedProducts");

                    b.Navigation("Orders");

                    b.Navigation("OtpAuthenticators");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
